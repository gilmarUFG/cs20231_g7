name: AWS Full Deploy

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["dockerize"]
    types:
      - completed
permissions:
  id-token: write
  contents: read
jobs:
  deploy-production:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: "18"
    - name: Build React App
      run: |
        cd ${{ vars.FRONTEND_PATH }} &&
        npm install &&
        npm install @mui/material @emotion/react @emotion/styled @mui/icons-material &&
        npm run build
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@master
      with:
        role-to-assume: ${{ vars.IAM_ROLE }}
        role-session-name: GithubActionsOIDC
        aws-region: ${{ vars.AWS_REGION }}
    - name: Deploy to S3
      run: |
        aws s3 sync ${{ vars.FRONTEND_PATH }}/dist/ s3://${{ vars.S3_BUCKET_NAME }} --delete &&
        aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DIST_ID }} --paths "/*" 
    - name: Start RDS Instance
      run: |
       INSTANCE_STATUS=$(aws rds describe-db-instances --db-instance-identifier ${{ vars.RDS_INSTANCE_ID }} --query 'DBInstances[0].DBInstanceStatus' --output text)
        if [ "$INSTANCE_STATUS" = "available" ]; then
          aws rds reboot-db-instance --db-instance-identifier ${{ vars.RDS_INSTANCE_ID }} &&
          sleep 120
        else
          aws rds start-db-instance --db-instance-identifier ${{ vars.RDS_INSTANCE_ID }} &&
          sleep 330
        fi 
    - name: Start EC2 Instance
      run: |
        INSTANCE_STATUS=$(aws ec2 describe-instances --instance-ids ${{ vars.EC2_INSTANCE_ID }} --query 'Reservations[0].Instances[0].State.Name' --output text)
        if [ "$INSTANCE_STATUS" = "running" ]; then
          aws ec2 reboot-instances --instance-ids ${{ vars.EC2_INSTANCE_ID }} &&
          sleep 30
        else
          aws ec2 start-instances --instance-ids ${{ vars.EC2_INSTANCE_ID }} &&
          sleep 90
        fi 
    - name: Connect and Build 
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_PUBLIC_IP }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        command_timeout: 30m
        script: |
          sudo rm * -rf &&
          rm .env &&
          echo 'SECRET_KEY=${{ secrets.SECRET_KEY }}' >> .env &&
          echo 'DB_HOST=${{ vars.DB_HOST }}' >> .env &&
          echo 'DB_PORT=${{ vars.DB_PORT }}' >> .env &&
          echo 'DB_USERNAME=${{ vars.DB_USERNAME }}' >> .env &&
          echo 'DB_PASSWORD=${{ secrets.DB_PASSWORD }}' >> .env &&
          echo 'DB_SCHEMA=${{ vars.DB_SCHEMA }}' >> .env &&
          echo '${{ secrets.SSH_PRIVATE_KEY }}' >> pvt_key.pem &&
          sudo chmod 400 pvt_key.pem &&
          ssh -i pvt_key.pem -o StrictHostKeyChecking=no -f -N -L 3310:${{ secrets.RDS_ENDPOINT }}:3306 ec2-user@${{ secrets.EC2_PUBLIC_IP }} &&
          sleep 10 &&
          docker rm -f $(docker ps -aq) &&
          docker rmi -f $(docker images -q) &&
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/unirent:latest &&
          docker run -d -p ${{ vars.AWS_LB_PORT }}:${{ vars.AWS_LB_PORT }} --env-file .env --network="host" ${{ secrets.DOCKERHUB_USERNAME }}/unirent:latest
    - name: Running State
      run: sleep 2h
    - name: Close EC2 Instance
      run: aws ec2 stop-instances --instance-ids ${{ vars.EC2_INSTANCE_ID }}
    - name: Close RDS Instance
      run: aws rds stop-db-instance --db-instance-identifier ${{ vars.RDS_INSTANCE_ID }}
